Enter Spring

Why Spring ?
What is it ?
container --manages life cycle of spring beans
(spring bean --- java obj whose life cycle completely managed by SC(spring container)
eg : controller, service,DAO.
framework --rdymade implementation of std patterns(eg :MVC,Proxy,singleton,factory, ORM ...)


Spring is modular n extensive framework.




What is dependency injection ?

In JSP---JB---DAO -- POJO layers
Dependent Objs -- JavaBean , Hibernate based DAO, JDBC Based DAO
Dependencies --- DAO, SessionFactory , DB connection


All of above are examples of tight coupling.
Why --Any time the nature of the dependency changes , dependent obj is affected(i.e u will have to make changes in dependent obj)


Tight coupling --strongly un desirable.
Why -- difficult to maintain or extend.

In above layers , Java bean creates the instance of DAO.
Hibernate based DAO , looks up SF from HibUtils.
JDBC based DAO , looks up db connection from DBUtils.

i.e dependent objects are managing their dependencies. ---traditional/conventional programming model.

What is D.I ?(Dependency injection=wiring=collaboration between dependent & dependency)  ---way of achieving IoC
Instead of dependent objs managing their dependencies , 3rd party containers(eg : Angular / Spring/ EJB) will auto create the dependecies & make it available to dependents, directly @ run time.

Since dependents are no longer managing dependencies --its called as IoC ---inversion of control(control here after lies with SC)

Hollywood principle --You don't call us , we will call you....

eg : UserController
@Autowired
private IUserService service;

In DAO layer
@AutoWired
private SessionFactory sf;


Steps for spring nature to Java SE (core java application)
Important :  Extract spring api-docs
0. Change perspective to Java
1. Create Java project
2. Create User lib --containing spring/hibenrate/jdbc drvr/REST.... JARs.(from day10_help\spring-help\spring-hibernate-rest-jars)
3. Add user lib in build path.(R click --build path --confgure build path)
3.5 Copy dependent & dependency beans from day10_help/spring-help/rdy code.
4. Create new src folder --<resources> & create spring bean config xml file.
5. Add namespace <beans>


More details about <bean> tag 
Attributes
1. id --mandatory --bean unique id
2. class --- mandatory -- Fully qualified bean class name
3. scope --- In Java SE --- singleton | prototype
In web app singleton | prototype | request | session
Def scope = singleton
singleton --- SC will share single bean instance for multiple requests/demands
prototype -- SC creates NEW bean instance per  request/demand.

4. lazy-init --- def value=false.
Applicable only to singleton beans.
SC will auto create spring bean instance --- @ SC start up.

5. init-method --name of init style method(public void anyName() throws Exception{..})
called by SC after setter based D.I

6. destroy-method --name of destroy style method
(public void anyName() throws Exception{..})
called by SC before GC of spring bean (applicable only to singleton beans)


API 
1. How to start a Spring container(SC) in Java SE?
refer to diag.

2. How to get ready to use spring beans from SC ?
API of BeanFactory
public <T> T getBean(String beanId,Class<T> beanClass) throws BeansException

Spring bean life cycle
Types of wiring 

Annotations


Enter MVC








