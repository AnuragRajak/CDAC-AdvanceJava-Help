1. Addition of "default" keyword to add default method implementation ,  in interfaces.

Java 8 enables us to add non-abstract method implementations to interfaces by utilizing the default keyword. This feature is also known as Extension Methods. 

Why default keyword ?
1. To maintain backward compatibility with earlier Java SE versions
2. To avoid implementing new functionality in all implementation classes.
eg : Java added in Iterable<T> interface
default void forEach(Consumer<? super T> action) -- as a default method implementation

eg :

interface Formula {
    double calculate(double a);

    default double sqrt(double a,double b) {
        return Math.sqrt(a+b);
    }
}

In case of ambiguity or to refer to def imple. from i/f -- use InterfaceName.super.methodName(...) syntax

2  Can add static methods in java interfaces --- It's a better alternative to writing static library methods in helper class(eg --Arrays or Collections)

Such static methods can't be overridden in implementation class.
BUT can be re-declared.

They have to be invoked using interface ref , even in implementation or non implementation classes.(otherwise compiler error)

3. Functional interfaces ---An interface which has exactly single abstract method(SAM)  is called functinal interface.
eg Runnable,Comparable,Comparator,Iterable,Consumer,Predicate...

New annotation introduced -- @FunctionalInterface
(since Java SE 8)


Only Functional interface instances  can be created with lambda expressions, method references, or constructor references.

Solve --  Is following valid or invalid functional interface ?
public interface A { double calc(int a,int b);}  --yes
public interface B extends A {} --yes 
public interface C extends A { void show();} --no
public interface D {} --no
public interface E extends A {default void show(){}} --yes




4. Lambda Expressions
Objective -- Perform add/subtract/multiply/divide ...  operations on 2 double i/ps 
& return result.
How ?

refer to readme

5. Date/Time Handling --LocalDate/LocalTime classes.









